1(1)

c=c(5,10,15,20,25,30)

maximum=max(c)
minimum=min(c)

cat("Maximum: ",maximum,"\n")
cat("Minimum: ",minimum,"\n")


1(2)
n<-as.integer(readline("Enter a non-negative integer: "))
factorial <- function(n){
  if (n<0){
    return("Factorial is not defined for negative numbers.") 
  }
  else if(n==0){
    return(1)
  }
  else{
    result<-1
    for(i in 1:n){
      result <- result*i
    }
    return(result)
  }
}


result<-factorial(n)
if (is.numeric(result)) {
  cat("Factorial of", n, "is", result, "\n")
} else {
  cat(result, "\n")
}
  





1(3)


n<-as.integer(readline("Enter a non-negative integer: "))
fibonacci <- function(n){
  if (n<0){
    result<-(-1)^((-1*n)+1)*fibonacci(-1*n)
    return(result) 
  }
  else if(n==0){
    return(0)
  }
  else if(n==1){
    return(1)
  }
  else{
    result<-0
    for(i in 2:n){
      result <- fibonacci(i-1)+fibonacci(i-2)
    }
    return(result)
  }
}


result<-fibonacci(n)
cat("Fibonaaci of", n, "is", result, "\n")






1(4)
sign<-readline("Enter operation to perform (+, -, *, /): ")
a<-as.integer(readline("Enter first number: "))
b<-as.integer(readline("Enter second number: "))

# calculator<-function(a,b,sign){
#   if(sign=="+"){
#     return(a+b)
#   }
#   else if(sign=="-"){
#     return(a-b)
#   }
#   else if(sign=="*"){
#     return(a*b)
#   }
#   else if(sign=="/"){
#     if (b==0){
#       return("Can't divide by 0.")
#       
#     }
#     return(a/b)
#   }
#   else{
#     return("Invalid operation.")
#     
#   }
#     
# }
# 
# 
# result<-calculator(a,b,sign)
# if (is.numeric(result)){
#   cat(a,sign,b,"=",result)
# } else{
#   cat(result,"\n")
# }

add<-function(a,b){
  return(a+b)
}
subtract<-function(a,b){
  return(a-b)
}
multiply<-function(a,b){
  return(a*b)
}
divide<-function(a,b){
  if(b!=0){
  return(a/b)}
  else{
    return("Error: Can't divide by 0.")
  }
}

result<-switch(
  sign,
  "+"=add(a,b),
  "-"=subtract(a,b),
  "*"=multiply(a,b),
  "/"=divide(a,b),
  "Invalid operation."
)

if (is.numeric(result)){
    cat(a,sign,b,"=",result)
} else{
    cat(result,"\n")
}


  
1(5)
# Sample data
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 5, 4, 6)

# Create a scatter plot
plot(x, y, main="Scatter Plot", xlab="X-axis", ylab="Y-axis")

# Sample data
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 5, 4, 6)

# Create a line plot
plot(x, y, type="l", main="Line Plot", xlab="X-axis", ylab="Y-axis")


# Sample data
categories <- c("A", "B", "C", "D")
values <- c(10, 20, 15, 30)

# Create a bar plot
barplot(values, names.arg=categories, main="Bar Plot", xlab="Category", ylab="Value")


# Sample data
categories <- c("A", "B", "C", "D")
values <- c(10, 20, 15, 30)

# Create a pie chart
pie(values, labels=categories, main="Pie Chart")



2(1)
# Define the population of coins
population <- c(rep("gold", 20), rep("silver", 30), rep("bronze", 50))

# Number of draws
num_draws <- 100

# Generate the sample space by randomly drawing 10 coins
sample_space <- sample(population, size = num_draws, replace = FALSE)

# Display the sample space
print(sample_space)

(b)

# Define the possible outcomes (success and failure)
outcomes <- c("Success", "Failure")

# Define the probabilities corresponding to each outcome
probabilities <- c(0.9, 0.1)  # 90% success, 10% failure

# Number of surgical procedures
num_procedures <- 100

# Generate the sample space by randomly simulating 10 procedures
sample_space <- sample(outcomes, size = num_procedures, replace = TRUE, prob = probabilities)

# Display the sample space
cat(sample_space)

outcome_counts <- table(sample_space)

# Number of successes
success_count <- outcome_counts["Success"]

# Number of failures
failure_count <- outcome_counts["Failure"]

# Display the counts
cat("Number of successes:", success_count)
cat("Number of failures:", failure_count)




2(2)
n <- as.integer(readline("Enter value of n: "))

probability_no_shared_birthdays <- function(n) {
  if (n < 2) {
    return(0)
  }
  probability_no_share <- 1
  for (i in 1:(n - 1)) {
    probability_no_share <- probability_no_share * ((365 - i) / 365)
  }
  return(probability_no_share)
}

probability_shared_birthdays <- function(n) {
  probability_share <- (1 - probability_no_shared_birthdays(n))
  return(probability_share)
}

probability_calculation <- function(n) {
  result <- probability_shared_birthdays(n)
  if (n > 1) {
    cat("n: ", n, " Prob: ", result, "\n")
  } else {
    cat("Minimum 2 persons required.\n")
  }
}

for (i in 2:n) {
  probability_calculation(i)
  if(probability_shared_birthdays(i)<0.50){
    smallest_n<-i
  }
}
cat("Smallest value of n for which the probability of a match is greater than 0.5 : ",smallest_n+1)



2(3)

conditional_probability <- function(prob_A, prob_B, prob_B_given_A) {
  if (prob_B == 0) {
    return(0)  # Avoid division by zero
  }
  
  return((prob_B_given_A*prob_A)/prob_B)
}

# Given probabilities
prob_cloudy <- 0.4
prob_rain <- 0.2
prob_cloudy_given_rain <- 0.85

# Calculate the conditional probability
prob_rain_given_cloudy <- conditional_probability(prob_rain, prob_cloudy, prob_cloudy_given_rain)

# Display the result
cat("If it's cloudy, the probability of rain is:", prob_rain_given_cloudy, "\n")





2(4)
# Load the iris dataset
data(iris)

# Print the first few rows
head(iris)

# Find the structure of the dataset
str(iris)

# Find the range of sepal length
range_sepal_length <- range(iris$Sepal.Length)
cat("Range of Sepal Length:", range_sepal_length, "\n")

# Find the mean of sepal length
mean_sepal_length <- mean(iris$Sepal.Length)
cat("Mean Sepal Length:", mean_sepal_length, "\n")

# Find the median of sepal length
median_sepal_length <- median(iris$Sepal.Length)
cat("Median Sepal Length:", median_sepal_length, "\n")

# Find the quartiles and interquartile range of sepal length
quartiles_sepal_length <- quantile(iris$Sepal.Length, c(0.25, 0.75))
iqr_sepal_length <- quartiles_sepal_length[2] - quartiles_sepal_length[1]
cat("First Quartile (Q1):", quartiles_sepal_length[1], "\n")
cat("Third Quartile (Q3):", quartiles_sepal_length[2], "\n")
cat("Interquartile Range (IQR):", iqr_sepal_length, "\n")

# Find the standard deviation and variance of sepal length
sd_sepal_length <- sd(iris$Sepal.Length)
var_sepal_length <- var(iris$Sepal.Length)
cat("Standard Deviation Sepal Length:", sd_sepal_length, "\n")
cat("Variance Sepal Length:", var_sepal_length, "\n")

# Use the summary function on the dataset Iris
summary(iris)


2(5)
calculate_mode <- function(data) {
  freq_table <- table(data)
  max_freq <- max(freq_table)
  mode <- as.numeric(names(freq_table[freq_table == max_freq]))
  return(mode)
}
data <- c(2, 3, 2, 5, 6, 5, 5, 8, 8, 9, 2)
mode <- calculate_mode(data)
cat("Mode(s):", mode, "\n")




3(1)
cumulative_probability_9 <- pbinom(9, size = 12, prob = 1/6)
cumulative_probability_6 <- pbinom(6, size = 12, prob = 1/6)
probability_7_to_9 <- cumulative_probability_9 - cumulative_probability_6
cat("Probability of getting 7, 8, or 9 sixes:", probability_7_to_9, "\n")



3(2)

mean_score <- 72
std_dev <- 15.2
score_cutoff <- 84

z_score <- (score_cutoff - mean_score) / std_dev
probability_above_84 <- 1 - pnorm(z_score)
percentage_above_84 <- probability_above_84 * 100
cat("Percentage of students scoring 84 or more:", percentage_above_84, "%\n")




3(3)
# Define parameters
lambda <- 50
lower_bound <- 48
upper_bound <- 50

# Calculate probabilities
probability_upper <- ppois(upper_bound, lambda)
probability_lower <- ppois(lower_bound - 1, lambda)

# Calculate the final probability
probability_between_48_and_50 <- probability_upper - probability_lower

cat("Probability of between 48 and 50 customers:", probability_between_48_and_50, "\n")



3(4)
# Define parameters
D <- 17   # Total number of defective processors in the shipment
N <- 250  # Total number of processors in the shipment
n <- 5    # Size of the sample
k <- 3    # Number of defectives in the sample

# Calculate the probability using the hypergeometric distribution formula
probability_X_3 <- choose(D, k) * choose(N - D, n - k) / choose(N, n)

cat("Probability of exactly 3 defectives in the sample:", probability_X_3, "\n")



3(5)

# Define parameters
n <- 31             # Sample size
p <- 0.447          # Probability of success (using Wikipedia)
x_values <- 0:n     # Possible values of X (0 to 31)

# Calculate the PMF (Probability Mass Function)
pmf <- dbinom(x_values, size = n, prob = p)

# Calculate the CDF (Cumulative Distribution Function)
cdf <- pbinom(x_values, size = n, prob = p)

# Calculate mean, variance, and standard deviation
mean_X <- n * p
variance_X <- n * p * (1 - p)
std_deviation_X <- sqrt(variance_X)

# Print results
cat("Mean of X:", mean_X, "\n")
cat("Variance of X:", variance_X, "\n")
cat("Standard Deviation of X:", std_deviation_X, "\n")

# Plot PMF
barplot(pmf, names.arg = x_values, xlab = "X (Number of Students)", ylab = "Probability", main = "PMF of X")

# Plot CDF
plot(x_values, cdf, type = "s", xlab = "X (Number of Students)", ylab = "Cumulative Probability", main = "CDF of X")



4(1)
# Define the values of X (number of imperfections)
x <- c(0, 1, 2, 3, 4)

# Define the probabilities corresponding to each value of X
px <- c(0.41, 0.37, 0.16, 0.05, 0.01)

# Calculate the expected value (mean) using sum()
mean_x_sum <- sum(x * px)

# Calculate the expected value (mean) using weighted.mean()
mean_x_weighted <- weighted.mean(x, px)

cat("Average number of imperfections per 10 meters (using sum()):", mean_x_sum, "\n")
cat("Average number of imperfections per 10 meters (using weighted.mean()):", mean_x_weighted, "\n")


4(2)
# Define the probability density function (PDF)
pdf <- function(t) {
  0.1 * exp(-0.1 * t)
}

# Use integrate() to find the expected value
expected_value <- integrate(pdf, lower = 0, upper = Inf)$value

cat("Expected value of T:", expected_value, "\n")



4(3)

# Define the values of X
x_values <- 0:3

# Define the probability mass function (PMF) of X
px <- c(0.1, 0.2, 0.2, 0.5)
 
# Calculate the net revenue for each value of X
net_revenue <- x_values * 12 + (3 - x_values) * 2 - 18

# Calculate the expected value of Y
expected_value_Y <- sum(px * net_revenue)

cat("Expected value of Y (net revenue):", expected_value_Y, "\n")



4(4)

# Define the first moment function
f <- function(t) { t * 0.5 * exp(-abs(t)) }

# Calculate the first moment (mean)
moment1 <- integrate(f, lower = 2, upper = 9)
print(moment1)

# Define the second moment function
g <- function(t) { (t^2) * 0.5 * exp(-abs(t)) }

# Calculate the second moment about the origin
moment2 <- integrate(g, lower = 2, upper = 9)
print(moment2)

# Calculate the variance
variance <- moment2$value - (moment1$value)^2
print(variance)


4(5)

yf<-function(y){(3/4)*(1/4)^(sqrt(y)-1)}
x=as.integer(readline(prompt = "enter x "))
y=x^2
proby<-yf(y)
print(proby)
x<-c(1,2,3,4,5)
y<-x^2
proby<-yf(y)
print(proby)
expval<-sum(y*proby)
print(expval)
var=sum(y^2*proby)-(expval)^2
print(var)
